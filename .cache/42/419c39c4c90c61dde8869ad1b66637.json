{"id":"../node_modules/ethereum-bloom-filters/dist/utils.js","dependencies":[{"name":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\package.json","includedInParent":true,"mtime":1680032957770},{"name":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\ethereum-bloom-filters\\package.json","includedInParent":true,"mtime":1679715571483},{"name":"js-sha3","loc":{"line":3,"column":21,"index":100},"parent":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\ethereum-bloom-filters\\dist\\utils.js","resolved":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\js-sha3\\src\\sha3.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst sha3 = require(\"js-sha3\");\r\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\r\nfunction keccak256(data) {\r\n    return '0x' + sha3.keccak_256(toByteArray(data));\r\n}\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\r\nexports.padLeft = (value, chars) => {\r\n    const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\r\n    value = value.toString().replace(/^0x/i, '');\r\n    const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\r\n    return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\r\n};\r\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\r\nfunction bytesToHex(bytes) {\r\n    const hex = [];\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xf).toString(16));\r\n    }\r\n    return `0x${hex.join('').replace(/^0+/, '')}`;\r\n}\r\nexports.bytesToHex = bytesToHex;\r\n/**\r\n * To byte array\r\n * @param value The value\r\n */\r\nfunction toByteArray(value) {\r\n    if (value == null) {\r\n        throw new Error('cannot convert null value to array');\r\n    }\r\n    if (typeof value === 'string') {\r\n        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            throw new Error('invalid hexidecimal string');\r\n        }\r\n        if (match[1] !== '0x') {\r\n            throw new Error('hex string must have 0x prefix');\r\n        }\r\n        value = value.substring(2);\r\n        if (value.length % 2) {\r\n            value = '0' + value;\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < value.length; i += 2) {\r\n            result.push(parseInt(value.substr(i, 2), 16));\r\n        }\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n    if (isByteArray(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n    throw new Error('invalid arrayify value');\r\n}\r\nexports.toByteArray = toByteArray;\r\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\r\nfunction isByteArray(value) {\r\n    if (!value ||\r\n        // tslint:disable-next-line: radix\r\n        parseInt(String(value.length)) != value.length ||\r\n        typeof value === 'string') {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        // tslint:disable-next-line: radix\r\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\r\nfunction addSlice(array) {\r\n    if (array.slice !== undefined) {\r\n        return array;\r\n    }\r\n    array.slice = () => {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    };\r\n    return array;\r\n}\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/ethereum-bloom-filters/dist/utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}}],"sources":{"../node_modules/ethereum-bloom-filters/dist/utils.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst sha3 = require(\"js-sha3\");\r\n/**\r\n * Keccak256 hash\r\n * @param data The data\r\n */\r\nfunction keccak256(data) {\r\n    return '0x' + sha3.keccak_256(toByteArray(data));\r\n}\r\nexports.keccak256 = keccak256;\r\n/**\r\n * Adding padding to string on the left\r\n * @param value The value\r\n * @param chars The chars\r\n */\r\nexports.padLeft = (value, chars) => {\r\n    const hasPrefix = /^0x/i.test(value) || typeof value === 'number';\r\n    value = value.toString().replace(/^0x/i, '');\r\n    const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;\r\n    return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;\r\n};\r\n/**\r\n * Convert bytes to hex\r\n * @param bytes The bytes\r\n */\r\nfunction bytesToHex(bytes) {\r\n    const hex = [];\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex.push((bytes[i] >>> 4).toString(16));\r\n        hex.push((bytes[i] & 0xf).toString(16));\r\n    }\r\n    return `0x${hex.join('').replace(/^0+/, '')}`;\r\n}\r\nexports.bytesToHex = bytesToHex;\r\n/**\r\n * To byte array\r\n * @param value The value\r\n */\r\nfunction toByteArray(value) {\r\n    if (value == null) {\r\n        throw new Error('cannot convert null value to array');\r\n    }\r\n    if (typeof value === 'string') {\r\n        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\r\n        if (!match) {\r\n            throw new Error('invalid hexidecimal string');\r\n        }\r\n        if (match[1] !== '0x') {\r\n            throw new Error('hex string must have 0x prefix');\r\n        }\r\n        value = value.substring(2);\r\n        if (value.length % 2) {\r\n            value = '0' + value;\r\n        }\r\n        const result = [];\r\n        for (let i = 0; i < value.length; i += 2) {\r\n            result.push(parseInt(value.substr(i, 2), 16));\r\n        }\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n    if (isByteArray(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n    throw new Error('invalid arrayify value');\r\n}\r\nexports.toByteArray = toByteArray;\r\n/**\r\n * Is byte array\r\n * @param value The value\r\n */\r\nfunction isByteArray(value) {\r\n    if (!value ||\r\n        // tslint:disable-next-line: radix\r\n        parseInt(String(value.length)) != value.length ||\r\n        typeof value === 'string') {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        // tslint:disable-next-line: radix\r\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Add slice to array\r\n * @param array The array\r\n */\r\nfunction addSlice(array) {\r\n    if (array.slice !== undefined) {\r\n        return array;\r\n    }\r\n    array.slice = () => {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    };\r\n    return array;\r\n}\r\n"},"lineCount":102}},"error":null,"hash":"c02275fb65abfe38cad3d27f668fc765","cacheData":{"env":{}}}