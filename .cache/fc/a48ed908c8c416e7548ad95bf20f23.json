{"id":"../node_modules/strip-hex-prefix/src/index.js","dependencies":[{"name":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\package.json","includedInParent":true,"mtime":1680032957770},{"name":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\strip-hex-prefix\\package.json","includedInParent":true,"mtime":1679715571072},{"name":"is-hex-prefixed","loc":{"line":1,"column":28,"index":28},"parent":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\strip-hex-prefix\\src\\index.js","resolved":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\is-hex-prefixed\\src\\index.js"}],"generated":{"js":"var isHexPrefixed = require('is-hex-prefixed');\n\n/**\n * Removes '0x' from a given `String` is present\n * @param {String} str the string value\n * @return {String|Optional} a string by pass if necessary\n */\nmodule.exports = function stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n};"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":0}},{"generated":{"line":1,"column":4},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":4},"name":"isHexPrefixed"},{"generated":{"line":1,"column":17},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":17}},{"generated":{"line":1,"column":20},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":20},"name":"require"},{"generated":{"line":1,"column":27},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":27}},{"generated":{"line":1,"column":28},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":28}},{"generated":{"line":1,"column":45},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":45}},{"generated":{"line":1,"column":46},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":1,"column":46}},{"generated":{"line":3,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":7,"column":0}},{"generated":{"line":8,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":0},"name":"module"},{"generated":{"line":8,"column":6},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":6}},{"generated":{"line":8,"column":7},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":7},"name":"exports"},{"generated":{"line":8,"column":14},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":14}},{"generated":{"line":8,"column":17},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":17}},{"generated":{"line":8,"column":26},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":26},"name":"stripHexPrefix"},{"generated":{"line":8,"column":40},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":40},"name":"stripHexPrefix"},{"generated":{"line":8,"column":41},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":41},"name":"str"},{"generated":{"line":8,"column":44},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":44}},{"generated":{"line":8,"column":46},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":8,"column":46}},{"generated":{"line":9,"column":2},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":2}},{"generated":{"line":9,"column":6},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":6}},{"generated":{"line":9,"column":13},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":13},"name":"str"},{"generated":{"line":9,"column":16},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":16}},{"generated":{"line":9,"column":21},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":21}},{"generated":{"line":9,"column":29},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":29}},{"generated":{"line":9,"column":31},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":9,"column":31}},{"generated":{"line":10,"column":4},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":10,"column":4}},{"generated":{"line":10,"column":11},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":10,"column":11},"name":"str"},{"generated":{"line":10,"column":14},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":10,"column":14}},{"generated":{"line":11,"column":2},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":11,"column":2}},{"generated":{"line":12,"column":2},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":2}},{"generated":{"line":12,"column":9},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":9},"name":"isHexPrefixed"},{"generated":{"line":12,"column":22},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":22}},{"generated":{"line":12,"column":23},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":23},"name":"str"},{"generated":{"line":12,"column":26},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":26}},{"generated":{"line":12,"column":27},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":27}},{"generated":{"line":12,"column":30},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":30},"name":"str"},{"generated":{"line":12,"column":33},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":33}},{"generated":{"line":12,"column":34},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":34},"name":"slice"},{"generated":{"line":12,"column":39},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":39}},{"generated":{"line":12,"column":40},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":40}},{"generated":{"line":12,"column":41},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":41}},{"generated":{"line":12,"column":42},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":42}},{"generated":{"line":12,"column":45},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":45},"name":"str"},{"generated":{"line":12,"column":48},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":13,"column":48}},{"generated":{"line":13,"column":0},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":14,"column":0}},{"generated":{"line":13,"column":1},"source":"../node_modules/strip-hex-prefix/src/index.js","original":{"line":14,"column":1}}],"sources":{"../node_modules/strip-hex-prefix/src/index.js":"var isHexPrefixed = require('is-hex-prefixed');\n\n/**\n * Removes '0x' from a given `String` is present\n * @param {String} str the string value\n * @return {String|Optional} a string by pass if necessary\n */\nmodule.exports = function stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n"},"lineCount":null}},"error":null,"hash":"3d501c322deb942520d0745fc0f7c872","cacheData":{"env":{}}}