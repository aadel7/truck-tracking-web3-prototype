{"id":"../node_modules/multihashes/node_modules/multibase/src/base64.js","dependencies":[{"name":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\package.json","includedInParent":true,"mtime":1680032957770},{"name":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\multihashes\\node_modules\\multibase\\package.json","includedInParent":true,"mtime":1679715573742},{"name":"buffer","loc":{"line":2,"column":27,"index":40},"parent":"C:\\Users\\aadel\\Desktop\\Programming\\Solidity Project\\node_modules\\multihashes\\node_modules\\multibase\\src\\base64.js","resolved":"C:\\Users\\aadel\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\buffer\\index.js"}],"generated":{"js":"\n'use strict'\nconst { Buffer } = require('buffer')\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/multihashes/node_modules/multibase/src/base64.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}}],"sources":{"../node_modules/multihashes/node_modules/multibase/src/base64.js":"'use strict'\nconst { Buffer } = require('buffer')\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n"},"lineCount":46}},"error":null,"hash":"1aac7821a6a4152675f28562f33389b2","cacheData":{"env":{}}}